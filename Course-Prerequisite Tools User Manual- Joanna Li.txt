Joanna Li 
CSC 210

Documentation for Course-Prerequisite Tools
User Manual: 
Steps to Begin using the Program: 
1. Download all the files, and navigate to the directory containing them from the terminal or command line
2. Compile all .java files 
3. Execute CourseGraphBuilder.java (Make sure to run from terminal OR open a folder in VSCode, or else the write to file command will not save anything)
4. Write CourseGraph to file 
5. Execute CourseGraphAnalyzer
6. Enter the name of the file without the extension 
7. Run analyses on the file 


Notes: 
* A CourseGraph refers to a directed acyclic graph represented by an adjacency list of in-edges in which vertices represent courses, and edges point from prerequisites to the courses that require them. 
* Not explicitly stated in all option descriptions below, but the program aims to catch errors caused by invalid course name inputs or invalid inputs given for menu options 
* Note: CourseGraphBuilder.java has some courses and relationships which are added ahead of time. They represent the CSC courses and associated classes at Smith College, and the included file coursesCSC.txt is an included sample text representation of this CSC major CourseGraph. 

Running CourseGraphBuilder: 
99
Ends or quits the program. Quit will also occur if the program is run for 90,000 times. Realistically, this limit will not be reached during normal use of the program, and it exists to stop infinite loops caused by unforeseen bugs 


0 
Lists out all the courses with their prerequisites, all with ID numbers. 
The demo has some courses and relationships which are added ahead of time. This is marked in the code, and can be commented out, and the driver will still work and allow the addition of courses and edges from scratch.


1 
Add course- enter a name for a course, and it will be added to the list and an ID will be generated for it. 


2 - Add edge from prerequisite to course. The program will prompt you first to enter the name of the course, and then to enter the name of the prerequisite to add to it. An error message will be printed if either course doesn’t exist (they haven’t been added to the graph before trying to add the edge). If both courses exist, and the edge added is not a parallel edge or self edge, a new edge pointing from the prerequisite to the course will be added to the graph. 


3 - Remove course - Enter the name of a course, and the course and all of its associated edges will be removed from the graph, if the course exists. 


4 - Remove edge from a prerequisite to a course. Prompts user for the name of the course, and then for the name of the prerequisite to remove from that course. Both courses must exist for the operation to work 


5- Write to file. ONLY WORKS IN VSCODE IF A FOLDER IS OPENED, ALSO WORKS FROM TERMINAL. Will prompt the user for a filename, and then create a text file in the working directory which stores the CourseGraph created in the CourseGraphBuilder in a format that can be parsed by CourseGraphAnalyzer. A version number will be appended to the file names so that files will not be created with duplicate names during a single run of the program 


Running CourseGraphAnalyzer
* Driver will catch invalid (String) inputs if they are given instead of a integer such as the choices below 
1. Create and add courses and edges to a Course Graph, and then write it to a text file using CourseGraphBuilder
2. Execute CourseGraphAnalyzer.java, and then enter the name of a .txt CourseGraph file which is located in the working directory 
* POSSIBLE BUGS: Although it is not certain that all cases will work, tests performed so far show that errors have not occurred during testing while reading in files, and most .txt files which are not valid file inputs will be caught as having invalid formats or being empty CourseGraph files.
* In those cases where the file name entered is not found, or is the name of an empty or invalid file,  the program will prompt the user to reenter the filename again. There is a limit of 10 attempts before the program will automatically quit. 
99 -
Ends or quits the program.  Quit will also occur if the program is run for 90,000 times. Realistically, this limit will not be reached during normal use of the program, and exists to stop infinite loops caused by bugs. 


0 -
Lists out all the courses in the Course Graph representing a major 


1 - Search for course 
 Prompts user for the name of a course, and returns the course’s prerequisites and its name if it exists in the CourseGraph, or a message indicating that it was not found. 


2 - Check if a course A is required for B. 
Prompts users to enter the course they want to qualify for (B), and then enter the course which is a possible requirement (A). The program indicates either that no, A is not a requirement, or that it is. If A is a requirement, the program will provide the course progression (like 110→120→210) which shows that A is a prerequisite to B or a prerequisite to some prerequisite of B. 


3 - 
Check if A is a direct prerequisite for B. 
Will answer yes or no to the question of whether or not A has a stored prerequisite relationship to B, meaning that there is a directed edge pointing from A to B in the CourseGraph. 


4 - 
Generate course path. This will give users the options to enter 0 or 1 
* 0 - 
Generates a path through every course in the CourseGraph, or the major. This returns a numbered list of a valid order, or topological ordering of all the courses. It means that a student can take the courses exactly in the order provided, and all the prerequisite requirements of every course (if any) will appear in the sequence before the course itself appears. The specific order provided is valid, but not the ONLY valid ordering
* 1 - 
Generates a path through necessary courses in the CourseGraph which ends in qualification for a specific course. This returns a numbered list of a valid order, or topological ordering of all the courses a student needs to take to qualify for a single course they are prompted to enter the name of. The specific order provided is valid, but not the ONLY valid ordering


Explanation of Examples and Testers
CourseGraphTester.java - 
Tests the CourseGraph class methods such as IsEmpty, toString (with and without vertex IDs), adding courses (vertices) and edges, and removing courses and edges. A CourseGraph is initialized, built, and modified from scratch in the tester. 


CourseGraphAnalysisTester.java - 
Uses a built-in CoursGraph of the CSC classes to test analysis methods including toString (same as CourseGraph), IsRequired, IsPrerequisite, and variations of the course path generating method that took different inputs. The program ran different analyses on the CSC courses


FileToolsTester,java - 
Using a prebuilt CourseGraph, this tester calls toFileString on the CourseGraph to write the string representation generated by toFileString to a text file, and then reads in the text file and converts its contents to a copy of the original CourseGraph